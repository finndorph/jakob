#summary Connector design

=Writing a connector for JAKOB=
To write a JKOB connector you must implement a class the implements the `Connector` interface. The actual implementation of the connector must be placed in the `<JAKOB-DIR>/lib/WAYF/Connector/` directory

==Connector interface==
{{{
interface Connector
{
    /**
     * Default method called by worker
     * @param \GearmanJob $job Job Gearman job
     */
    public function execute(\GearmanJob $job);

    public function setStore(\WAYF\Store $store);

    public function setConfig(array $config);

    public function setup();
}
}}}

Please note that this interface is still under development, so it may change in the future.

=How to design API for JAKOB connectors=
When designing an API for a JAKOB connector to access, it is importent to make the interchange format as light weight as possible. The smaller and easier it is to parse, the quicker JAKOB will respond to a request.

==Basic requirements==
  * The API MUST be public accessible via one or more URL's (or IP address)
  * The request method SHOULD be GET or POST (Get is preferred)
  * The authentication against the API MUST not require human interaction
  * The number of requests for getting data MUST be keept to a bare minimum (one is preferred)
  * The interchange format MUST be as light weight as possible (JSON is preferred)

==Interchange format==
The interchange format SHOULD as a bare minimun contain the following informations
  * The request status (A message together with a code is preferred)
  * The requested attributes about the user (if success)
  * The key used to identify the user in the request (Return the CPR of the user if the CPR was the key used to retrive attributes)

It is also a good idear to return the following informations
  * A unique id number for the request (This will make debugging easier in case of errors)
  * The API version (This will make it easier to upgrade the API's interchange format at a later time)

The following is an example of an interchange format that is light weight and easy to parse.

===Example===
Below is a proposed example output of an external datasource, to be delivered back to a connector
{{{
{
    "id" : "v4j23h5vj5h3425v",
    "version" : "1.0",
    "userid" : "999999-8888",
    "status" : {
        "code" : "success"
    },
    "attributes" : {
        "attributekey1" : "attributevalue",
        "attributekey2" : [
            "attributevalue1",
            "attributevalue2"
        ],
        "attributekey3" : "attributevalue"
    } 
}
}}}