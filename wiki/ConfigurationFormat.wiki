#summary Describes the configuration format

A configuration of JAKOB is an interger indexed array, that in turn can contain the following keys:
 * data - REQUIRED
 * success - OPTIONAL
 * fail - OPTIONAL

== data ==
Contains the configuration for the connector to be called

A cpnnector configuration can contain the following options:

=== `_id` ===
_string_

The id of the connector to be used. This must match the id that is configured for the conector.

=== `_priority` ===
_string_  [`'sync'`|`'async'`]

Indicates wether the connector should be called synchronous (sync) or asynchronous (async). If the connector is called async, that JAKOB will jump directly to the success connector without waiting for a response. The result of the connector is fetched either at the end or when a connector is called sync. If a connector is called sync, JAKOB will wait for the result. Depending on that result, JAKOB will either choose the success connector or the fail connector.

*NOTE* only use sync if strictly necessary. Use of sync will halt the entire process until the connector has finished. 

=== `_options` ===
_array_

This array contains connector specific data, that will be parsed to the connector on invokation.

=== `_timeout` ===
_float_

Max time an connector is allowed to run until the user will be presented with the JAKOB UI. The values is a float in seconds where the decimal part is micro seconds.

=== `_timeoutFatal` ===
_boolean_

If set, that all timeouts will be fatal. Meaning that if a timeout occurs, then the attributes gathered so far is returned with out waiting for the rest of the connectors to finish.

== success ==
_integer_

Contains a pointer to the next connector to be executed if the result of the connector is successful. This must be the top level integer index in the configuration array. I no success connector is set, then the job wil terminate and the result so far is returned.

== fail ==
_integer_

Contains a pointer to the next connector to be executed if the result of the connector is unsuccessful. This must be the top level integer index in the configuration array.

{{{
array (
  0 => array (
    'data' => array (
      '_id' => 'CULR',
      '_priority' => 'sync',
      '_options' => array (
        'userkey' => 'wayfuser',
        'key' => 'wayfpass',
      ),
      'success' => 1,
      'fail' => 2,
    ),
  ),
  1 => array (
    'data' => array (
      '_id' => 'CPR',
      '_priority' => 'sync',
      '_options' => array (
        'userkey' => 'wayfuser',
        'key' => 'wayfpass',
      ),
    ),
  ),
  2 => array (
    'data' => array (
      '_id' => 'BBR',
      '_priority' => 'sync',
      '_options' => array (
        'userkey' => 'wayfuser',
        'key' => 'wayfpass',
      ),
    ),
  ),
)
}}}




---
= Old documentation =

*NOTE this document is not up to date and do not reflect the actual JAKOB implementation*

This is the initial proposal for a internal configuration format used in JAKOB, in  order to get attributes from different sources
= Example =
{{{
<jc:job xmlns:jc="http://www.wayf.dk/namespace/jakob/config/V1" ID="cdsfvvwedv" name="Hent attributter">
  <jc:task order="1">
    <jc:connector ID="CPR" name="CPR connector">
      <jc:options>
        <jc:option name="uid">ndlksvfv</jc:option>
      </jc:options>
    </jc:connector>                             
  </jc:task>
  <jc:batch order="2">                                    
    <jc:task>
      <jc:connector ID="VIP" name="VIP connector">
        <jc:options>
          <jc:option name="uid">ndlksvfv</jc:option>
        </jc:options>
      </jc:connector>
    </jc:task>
    <jc:task>   
      <jc:connector ID="CLUR" name="CLUR connecor">
        <jc:options>                                                                                            
          <jc:option name="uid">ndlksvfv</jc:option>                                                                
        </jc:options>
      </jc:connector>
    </jc:task>
  </jc:batch>
</jc:job>  
}}}

This can be done in JSON as well

{{{
{
    "ID": "cdsfvvwedv",
    "name": "Hent attributter",
    "tasks": [
        {
            "type": "task",
            "order": 1,
            "connector": {
                "ID": "CPR",
                "name": "CPR connector",
                "options": {
                    "uid": "ndlksvfv"
                }
            }
        },
        {
            "type": "batch",
            "order": 2,
            "tasks": [
                {
                    "type": "task",
                    "connector": {
                        "ID": "VIP",
                        "name": "VIP connector",
                        "options": {
                            "uid": "ndlksvfv"
                        }
                    }
                },
                {
                    "type": "task",
                    "connector": {
                        "ID": "CLUR",
                        "name": "CLUR connector",
                        "options": {
                            "uid": "ndlksvfv"
                        }
                    }
                }
            ]
        }
    ]
}
}}}

and in nativ PHP

{{{
<?php
$job = array(
    'tasks' => array(
        array(
            '_id' => 'CPR',
            '_priority' => 'sync',
            '_timeout' => 3,
            '_options' => array(
                'userkey' => 'wayf',
                'key' => 'wayf4ever',
            ),
        ),
        array(
            '_id' => 'VIP',
            '_priority' => 'async',
            '_timeout' => 3,
            '_options' => array(
                'userkey' => 'wayf',
                'key' => 'wayf4evervip',
            ),
        ),
        array(
            '_id' => 'CPR',
            '_priority' => 'async',
            '_timeout' => 3,
            '_options' => array(
                'userkey' => 'wayf',
                'key' => 'wayf4ever',
            ),
        ),
    ),
);
}}}

= Elements = 

----
== Job ==
`<job>` is the outer element of the configuration file

There are two elements allowed in `<job>`: `<task>` and `<batch>`

`ID` (Required)
 ID of the job. Used to uniquely identity the job

`name` (Optional)
 An optional friendly name for the job

`<task>` or `<batch>` (One or more)
 Contains description of the different task the job should perform.

----
== Task ==
`<task>` are the definition of single connection to an external source.

`order` (Optional)
 Defines the order in which the different tasks are performed.

`<connector>` (Required)
 Describes the connector used for the task.

----
== Batch ==
`<batch>` is the container for multiple `<task>` elements that are to be executed simultaneous.

`order` (Optional)
 Defines the order in which the batched tasks should be performed compared to the other `<task>` elements.

`<task>` (One or more)
 The tasks that should be executed simultaneous.

----
== Connector ==
`<connector>` defines how to connect to the external source.

`ID` (Required)
 Unique identifier for the connector.

`name` (Optional)
 optional name for the connector configuration.

`<options>` (Optional)
 Defines options for the connector.

----
== Options ==
 The `<options>` element defines all options that is needed for a connector to run successfully.

`<option>` (One or more)
 A single option for a connector.

----
== Option ==
The `<option>` element contains data for a single option used by a connector.

`name` (Required)
 Name of the option

----